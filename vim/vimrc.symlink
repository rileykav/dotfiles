""""""""""""""""""""""""""""""""""""""""""""""
" Add Plugins (seems important to put this hear)
""""""""""""""""""""""""""""""""""""""""""""""

source ~/.dotfiles/vim/plugins.vim


""""""""""""""""""""""""""""""""""""""""""""""
" Core Vim Setting
""""""""""""""""""""""""""""""""""""""""""""""

" When searching through a fie, do it recurisvly
set path+=**

" Add yank to normal clipboard
set clipboard=unnamed

" Allow mouse to jump cursor
set mouse=a
      
" Line number relative to current line
set number relativenumber

" seet paste toggle
"set pastetoggle=<leader>v
        
" Sets delay for <esc> ke
set timeoutlen=10 ttimeoutlen=0
        
" Sets how many lines of history VIM has to remember
set history=1000

" Tells vim to keep a backup file
set backup

" tell vim where to put its backup files
set backupdir=~/.dotfiles/vim/backup

" tell vim where to put swap files
set dir=~/.dotfiles/vim/swapfiles

" tell vim where to put undo files
set undodir=~/.vim/undodir
set undofile

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread
au FocusGained,BufEnter * checktime



" Underlines cursor line in insert mode (I don't love it)
"autocmd InsertEnter,InsertLeave * set cul!





nnoremap <Up> gk
nnoremap <Down> gj





" Keep buffers around?
set hidden

" Save file when changing buffer
" set autowriteall

" Remove ~ Character indicating screen lines that are not in buffer (I like ~ as an indicator for this, though numbers also do it)
"set fillchars=eob:\ ,

" Makes i<esc> not move the cursor, while a<esc> shifts one right (Nice but weird)
"inoremap <Esc> <Esc>`^



" Reduce Message Size
set shortmess=at




""""""""""""""""""""""""""""""""""""""""""""""
" Buffer Variables
""""""""""""""""""""""""""""""""""""""""""""""
"" doesn't really work with multiple files in the buffer.
let w:filenamedotextension=expand("%")
let w:filename=expand("%:r")

fun! LocalFilename()
    let l:filename=expand("%:r")
    let l:filenamedotextension=expand("%")
    return l:filename
endfun




""""""""""""""""""""""""""""""""""""""""""""""
" Core Vim Keybindings / Rebinds
""""""""""""""""""""""""""""""""""""""""""""""


" Leader Key !!! (local leader used for local file settings, i.e. a python specific mapping or something, not currently used)
let mapleader=','
let maplocalleader = "\\"
" Set a second leader key?
"nmap ยง <leader>



" Quick Saving (note: all maps should be nore, this means noremap dd dd wont be recursive)
nnoremap <leader>w :w<cr>
nnoremap <esc> :w<cr>
command W w
inoremap <c-w> <esc>:w<cr>a
" Quick Quit
nnoremap <leader>q :q<cr>
command Q q!

" Quick Quit no save
nnoremap <leader>Q :q!<cr>

" Quick Save & Quit
nnoremap <leader>x :x<cr>
noremap <c-x> <esc>:x<cr>

" Open Vim terminal split
nnoremap <leader>t :term<cr>

" Undo and Redo
nnoremap <leader>u :redo<cr>

inoremap <C-y> <esc>:redo<cr>i
inoremap <C-z> <esc>ui

" Capatalise current word
inoremap <C-u> <esc>mmviwU`ma
noremap <C-u> mmviwU`m


" inoremap <C-q> <esc>
"inoremap <esc> <esc>:echo "don't use escape"<cr>i

" Spelling
:set spell spelllang=en_gb
:nnoremap ? z=
:nnoremap < [s
:nnoremap > ]s

" Replace all occurances of current word
"nnoremap gw :%s/\<<c-r><c-w>\>//g<left><left>
"nnoremap ge "zye:%s/<C-R>z/
" Re-source vimrc file 
nnoremap <leader>r :source ~/.vimrc<cr> 

" Clears search highlighting
nnoremap <CR> :noh<CR><CR>

" Spliting New Panes
" nnoremap <leader>v :vnew<CR> " Create a vertical Split
nnoremap <leader>- :new<CR> " Create a Hotizontal Split



" Wrap word in douple quotes (same functionality as tpope's surround yss"
"noremap <leader>" viw<esc>a"<esc>bi"<esc>lel


noremap <leader>j <C-w>j| "switching to below window 
noremap <leader>k <C-w>k| "switching to above window
noremap <leader>l <C-w>l| "switching to right window 
noremap <leader>h <C-w>h| "switching to left window

" Resizing Panes
noremap <leader>J <C-w>10- 
noremap <leader>K <C-w>10+ 
noremap <leader>L <C-w>10> 
noremap <leader>H <C-w>10< 

nnoremap <leader>sv :source $MYVIMRC<cr>

set splitright
set splitbelow
" noremap <silent> <C-h> <Plug>WinMoveLeft
" noremap <silent> <C-j> <Plug>WinMoveDown
" noremap <silent> <C-k> <Plug>WinMoveUp
" noremap <silent> <C-l> <Plug>WinMoveRight


" noremap <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
" In vim to get a hex code for a certain combination do (for <C-u> here):
"  <C-v><C-u><C-c>ga
" You need to do this for <S-space> command to work and map iterms mapping in profile to the hex key
noremap <space> /


" Wildcard opening new files in buffers, tabs, splits
noremap <c-e> :edit *
noremap <c-t> :tabnew *
noremap <c-f> :vs *
noremap <c-v> :88vs *
noremap <c-s> :split *
nnoremap <leader>v :vertical resize 88<cr>
nnoremap <leader>`v :vertical resize 26<cr>

noremap <c-b> <c-v>
noremap <c-space> ?
noremap <leader>] gt
noremap <leader>[ gT

" Useful noremappings for managing tabs
noremap <leader>tn :tabnew<cr>
noremap <leader>to :tabonly<cr>
noremap <leader>tc :tabclose<cr>
noremap <leader>tm :tabmove 
noremap <leader><Tab> :tabnext<cr>






augroup Example
    autocmd!
    autocmd TextYankPost * if v:event.operator ==# 'y' | echo "Yanked Text" | endif
augroup END




" Tab in or out visually selected lines
xnoremap > >gv
xnoremap < <gv
xnoremap <Tab> >gv
xnoremap <S-Tab> <gv
nnoremap <Tab> V>
nnoremap <S-Tab> V<

" Select all line but not the newline
nnoremap <leader>Y mm^v$hy`m
nnoremap <leader>D mm^v$hd`m
inoremap <C-v> <esc>pa
" inoremap <leader>w <esc>:w<cr>
" inoremap <leader>x <esc>:x<cr>
" inoremap :w <esc>:w
" inoremap :W <esc>:w



" Move current line up or down





" Parenthesis and Brackets

"vnorenoremap $1 <esc>`>a)<esc>`<i(<esc>
"vnorenoremap $2 <esc>`>a]<esc>`<i[<esc>
"vnorenoremap $3 <esc>`>a}<esc>`<i{<esc>
"vnorenoremap $$ <esc>`>a"<esc>`<i"<esc>
"vnorenoremap $q <esc>`>a'<esc>`<i'<esc>
"vnorenoremap $e <esc>`>a"<esc>`<i"<esc>

" noremap auto complete of (, ", ', [
"inorenoremap $1 ()<esc>i
"inorenoremap $2 []<esc>i
"inorenoremap $3 {}<esc>i
"inorenoremap $4 {<esc>o}<esc>O
"inorenoremap $q ''<esc>i
"inorenoremap $e ""<esc>i




" Renoremap VIM 0 to first non-blank character (not literal start)
noremap 0 ^


"" Aliases
:command Vimrc :vs ~/.vimrc
source ~/.dotfiles/vim/abreviations.vim
:command VimAbreviations :vs ~/.dotfiles/vim/abreviations.vim
:command VimPlugins :vs ~/.dotfiles/vim/plugins.vim
:command VimFiletypes :vs ~/.dotfiles/vim/filetypes.vim
:command VimSpellDict :vs ~/.dotfiles/vim/bundle/Vundle.vim/spell/en.utf-8.add
:command Zshrc :vs ~/.zshrc
:command Zshfunctions :vs ~/.dotfiles/zsh/functions.zsh
:command Zshalias :vs ~/.dotfiles/zsh/alias.zsh
:command Zshdefinitions :vs ~/.dotfiles/zsh/definitions.zsh
:command Tmuxrc :vs ~/.tmux.conf
:command Dotfiles :vs ~/.dotfiles/
:command TempVim :vs ~/.dotfiles/vim/temp.vim
:command PyBoiler :vs ~/.dotfiles/vim/boilerplate/python/riley_base.py
" :command OctaveBoiler :vs ~/.dotfiles/vim/boilerplate/octave/riley_base.m
:command TexBoiler :vs ~/.dotfiles/vim/boilerplate/latex/riley_base.tex



""""""""""""""""""""""""""""""""""""""""""""""
" Folding
""""""""""""""""""""""""""""""""""""""""""""""
au FileType cpp set foldmethod=syntax 
au FileType cpp set foldnestmax=10
au FileType cpp set nofoldenable
au FileType cpp set foldlevel=2




""""""""""""""""""""""""""""""""""""""""""""""
" Useful
""""""""""""""""""""""""""""""""""""""""""""""

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun


if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif

autocmd QuitPre *.tex {
    call CleanCurrentTex()
    }


" Pressing ,ss will toggle and untoggle spell checking
noremap <leader>ss :setlocal spell!<cr>





" Turn persistent undo on 
" means that you can undo even when you close a buffer/VIM
try
    set undodir=~/.vim_runtime/temp_dirs/undodir
    set undofile
catch
endtry






""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""

"" Vimux
let dir = expand('%:p:h')

nnoremap <leader>d :call VimuxRunCommand("cd '" . dir . "'")<cr>
nnoremap <leader>. :call VimuxPromptCommand()<cr>
nnoremap <leader>saf :call VimuxPromptCommand("safari-search ")<cr>
let g:VimuxOrientation = "v"

fun Foo(bar)
    echo a:bar
endfun

fun! SafariSearch(search_term="false00")
    if a:search_term=="false00"
        let local_search=input("Safari Search? ")
    else
        let local_search=a:search_term
    endif
    VimuxRunCommand('safari-search "' . local_search . '" && open /Applications/Safari.app')
endfun

nnoremap <leader>saf :call SafariSearch()<cr>
function! s:get_visual_selection()
    " Credit to xolox at https://stackoverflow.com/questions/1533565/how-to-get-visually-selected-text-in-vimscript
    " Why is this not a built-in Vim script function?!
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)
    if len(lines) == 0
        return ''
    endif
    let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]
    return join(lines, "\n")
endfunction

function! VisualSearch()
    let search=s:get_visual_selection()
    call SafariSearch(search)
endfunction
xnoremap <leader>saf :call VisualSearch()<cr>


" Saves file Run script in tmux shell bellow (doesnt need executible if sh or py)
fun! RunCurrentScript()
    w
    call VimuxRunCommandInDir("run-script", 1)
    set cmdheight=2
    echo "Script Complete"
    set cmdheight=1
endfun



"" Vimtex
" Haven't figure it out yet, but try mess around with lualatex, and 
" specifically with the \math



" To use with MacTex run the following:
"   % type latexmk
"   latexmk is /usr/loval/bin/latexmk
"   % sudo ln -s /usr/../latexmk /usr/local/bin
"
" Or try the directory: /Library/TeX/texbin/latexmk
" Might be the same file ?
"
" For multifle support, use one of the following
" 1. Set up a main.tex file, and the following to your vimrc
"   autocmd BufReadPre *.tex let b:vimtex_main = 'main.tex'
"
" 2. At the start of all none main files include as the first line:
"   %! TEX root = <main-tex-file-name>.tex
"
" I have the second set up so that my tex files follow a patern of name.tex 
" as the main file, and all subiles are name.appendix.tex, name.bib.tex etc.
"
"
" Set tex type to latex
" let g:tex_flavor = 'latex' "Never got working
let g:vimtex_compiler_enabled = 1 " (Dis/En)ables Compiler
" let g:vimtex_compiler_progname = 'latexmk'
let g:vimtex_view_method = 'skim'
let g:vimtex_compiler_latexmk_engines = {
        \ '_'                : '-pdf',
        \ 'pdflatex'         : '-pdf',
        \ 'dvipdfex'         : '-pdfdvi',
        \ 'lualatex'         : '-lualatex',
        \ 'xelatex'          : '-xelatex',
        \ 'context (pdftex)' : '-pdf -pdflatex=texexec',
        \ 'context (luatex)' : '-pdf -pdflatex=context',
        \ 'context (xetex)'  : '-pdf -pdflatex=''texexec --xtx''',
        \}
" let g:vimtex_compiler_engine = 'latexmk'
" let g:vimtex_compiler_method = 'latexmk' "Default setting
" let g:vimtex_compiler_method = 'lualatex' "Default setting
" let g:vimtex_compiler_latexmk = {
"         \ 'build_dir' : '',
"         \ 'callback' : 1,
"         \ 'continuous' : 1,
"         \ 'executable' : 'latexmk',
"         \ 'hooks' : [],
"         \ 'options' : [
"         \   '-lualatex',
"         \   '-quiet',
"         \   '-file-line-error',
"         \   '-synctex=1',
"         \   '-interaction=nonstopmode',
"         \ ],
"         \}
" let g:vimtex_compiler_latexmk = {
"         \ 'build_dir' : '',
"         \ 'callback' : 1,
"         \ 'continuous' : 1,
"         \ 'executable' : 'latexmk',
"         \ 'hooks' : [],
"         \ 'options' : [
"         \   '-lualatex',
"         \   '-quiet',
"         \ ],
"         \}
let g:vimtex_compiler_latexrun = {
        \ 'build_dir' : '',
        \ 'options' : [
        \   '-verbose-cmds',
        \   '--latex-args="-synctex=1"',
        \ ],
        \}

" let g:vimtex_syntax_conceal_default = 0 " Doesn't work....
" let g:vimtex_compiler_latexmk = {
"         \ 'build_dir' : '',
"         \ 'callback' : 1,
"         \ 'continuous' : 1,
"         \ 'executable' : 'latexmk',
"         \ 'hooks' : [],
"         \ 'options' : [
"         \   '-quiet',
"         \   '-synctex=1',
"         \   '-interaction=nonstopmode',
"         \ ],
"         \}
" let g:vimtex_compiler_latexmk = {
"     \ 'build_dir' : '',
"     \ 'callback' : 1,
"     \ 'continuous' : 1,
"     \ 'executable' : 'latexmk',
"     \ 'hooks' : [],
"     \ 'options' : [
"     \   '-verbose',
"     \   '-file-line-error',
"     \   '-synctex=1',
"     \   '-interaction=nonstopmode',
"     \ ],
"     \}



"--------------- Lualatex (Not Working) ---------------"
" let g:vimtex_compiler_progname = 'nvr'
" let g:vimtex_compiler_latexmk_engine = 'lualatex'
" set nocompatible
" filetype plugin indent on
" syntax enable
" let g:vimtex_compiler_progname = 'nvr'
" let g:tex_flavor = 'latex'
" let g:vimtex_view_method = 'skim'
" let g:vimtex_quickfix_mode = 0
" let g:vimtex_compiler_latexmk = {
"   \ 'build_dir' : 'dist',
"   \}




"--------------- Markdown ---------------"
" fun MarkdownCompile()
"     call VimuxRunCommandInDir("", 0)
" endfun
"     
" autocmd BufWrite FileType markdown :call MarkdownCompile



syntax enable
" Viewer options: One may configure the viewer either by specifying a built-in
" viewer method:
let maplocalleader = ","
let g:vimtex_indent_enabled = 0
" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Ignores unnecessary warnings
let g:vimtex_quickfix_ignore_filters = [
  \'Underfull \\hbox (badness [0-9]*) in ',
  \'Overfull \\hbox ([0-9]*.[0-9]*pt too wide) in ',
  \'Overfull \\vbox ([0-9]*.[0-9]*pt too high) detected ',
  \'Package hyperref Warning: Token not allowed in a PDF string',
  \'Package typearea Warning: Bad type area settings!',
  \'Marginpar on page[0-9]* moved',
  \'Marginpar on page[0-9]* moved',
  \'Marginpar',
  \'Overfull',
  \'tikz-feynman Warning',
  \"`h' float specifier",
  \"requested document class",
  \"Missing",
  \"A float is stuck",
  \"empty link",
  \"Not loaded"
  \]

" Vim-Latex " Disabled
set iskeyword+=: "Enables fig:<autocompletion> with <C-n> 
"let b:suppress_latex_suite = 1 "Disables vim-latex

"" NERDTree 
" Show hidden files in NERDTree
let g:NERDTreeShowHidden=0

"autocmd vimenter * NERDTree
"nmap <C-\> :NERDTreeToggle<CR>
"Closes vim if NERDTree is only window
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeWinPos = "left"


nmap <silent> <leader>y :NERDTreeFind<cr>
"nmap <leader>n :NERDTreeToggle<cr>
nmap <silent> <leader>\ :NERDTreeToggle<cr>






"" YouCompleteMe
" Closes YCM window i think???
let g:ycm_autoclose_preview_window_after_completion = 1

" Find out how to move this preview to the bottom
set completeopt-=preview



"" Vim-Tmux-Navigator
" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 1



"" vim-tmux-runner (Use VIMUX to doe this?)
" Helps make python work right
let g:VtrStripLeadingWhitespace = 0
let g:VtrClearEmptyLines = 0
let g:VtrAppendNewline = 1

"nmap <leader>ta :call VtrSendLinesToRunner()<cr>
let g:VtrUseVtrmaps = 1



"" Commentary


:command VimVisuals :vs ~/.dotfiles/vim/visuals.vim


""""""""""""""""""""""""""""""""""""""""""""""
" Private
""""""""""""""""""""""""""""""""""""""""""""""

if filereadable(expand("~/.dotfiles/vim/private.vim"))
    source ~/.dotfiles/vim/private.vim
endif



""""""""""""""""""""""""""""""""""""""""""""""
" Abreviations
""""""""""""""""""""""""""""""""""""""""""""""



source ~/.dotfiles/vim/abreviations.vim




""""""""""""""""""""""""""""""""""""""""""""""
" Visuals
""""""""""""""""""""""""""""""""""""""""""""""


source ~/.dotfiles/vim/visuals.vim





""""""""""""""""""""""""""""""""""""""""""""""
" Filetypes
""""""""""""""""""""""""""""""""""""""""""""""


source ~/.dotfiles/vim/filetypes.vim





""""""""""""""""""""""""""""""""""""""""""""""
" Unknown
""""""""""""""""""""""""""""""""""""""""""""""

" What does this do??? Without nore it broke things ...
":inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"



""""""""""""""""""""""""""""""""""""""""""""""
" Temp Vimrc File (used to quickly add a temp vimrc line)
""""""""""""""""""""""""""""""""""""""""""""""

source ~/.dotfiles/vim/temp.vim



""""""""""""""""""""""""""""""""""""""""""""""
" Dont Want?
""""""""""""""""""""""""""""""""""""""""""""""

" Clear highlighted search
"map <space> :set hlsearch! h1seach?<cr>

" markdown to html
"nmap <leader>md :%!markdown --html4tags <cr>

















" Word Count


" new in vim 7.4.1042
let g:word_count=wordcount().words
function WordCount()
    if has_key(wordcount(),'visual_words')
        let g:word_count=wordcount().visual_words."/".wordcount().words " count selected words
    else
        let g:word_count=wordcount().cursor_words."/".wordcount().words " or shows words 'so far'
    endif
    return g:word_count
endfunction


nnoremap <leader>W :echo WordCount()<cr>

function! EpubClean()
    if search("p><p","cwn")>0
        %s/p><p/p>\r<p/g
    endif
endfunction

let g:colorcolumnbool=0
function! EightyLineToggle()
    if g:colorcolumnbool==0
        set colorcolumn=80
        let g:colorcolumnbool=1
    else
        set colorcolumn=200
        let g:colorcolumnbool=0
    endif
endfunction

function! EightyLineFlash()
    call EightyLineToggle()
    redraw
    sleep 350m
    call EightyLineToggle()
endfunction


command EightyLineToggle call EightyLineToggle()
command EightyLineFlash call EightyLineFlash()
nnoremap <leader>ft :call EightyLineToggle()<cr>
nnoremap <leader>ff :call EightyLineFlash()<cr>
" Stop the 'n files to edit' error, doesn't work...
" if argc() > 1
"  silent blast " load last buffer
"  silent bfirst " switch back to the first
" endif

set shortmess=at






"--------------- Snippets ---------------"
let g:UltiSnipsExpandTrigger = 'ยง'
let g:UltiSnipsJumpForwardTrigger = 'ยง'
let g:UltiSnipsJumpBackwardTrigger = '<s-ยง>'
let g:UltiSnipsSnippetDirectories=["/users/riley/.dotfiles/vim/snippets"]







"--------------- latex syntax  ---------------"
" hi clear texStyleBold
hi clear texStyleItal
hi texStyleItal cterm=bold
hi clear mdStyleItal
hi mdStyleItal cterm=bold
