
""""""""""""""""""""""""""""""""""""""""""""""
" Add Plugins (seems important to put this hear)
""""""""""""""""""""""""""""""""""""""""""""""

source ~/.dotfiles/vim/plugins.vim

""""""""""""""""""""""""""""""""""""""""""""""
" Core Vim Setting
""""""""""""""""""""""""""""""""""""""""""""""

" When searching through a fie, do it recurisvly
set path+=**



" Add yank to normal clipboard
set clipboard=unnamed

" Allow mouse to jump cursor
set mouse=a
      
" Line number relative to current line
set number relativenumber

" seet paste toggle
"set pastetoggle=<leader>v
        
" Sets delay for <esc> ke
set timeoutlen=10 ttimeoutlen=0
        
" Sets how many lines of history VIM has to remember
set history=1000

" Tells vim to keep a backup file
set backup

" tell vim where to put its backup files
set backupdir=~/.dotfiles/vim/backup

" tell vim where to put swap files
set dir=~/.dotfiles/vim/swapfiles

" tell vim where to put undo files
set undodir=~/.vim/undodir
set undofile

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread
au FocusGained,BufEnter * checktime


" Underlines cursor line in insert mode (I don't love it)
"autocmd InsertEnter,InsertLeave * set cul!

" iTerm2 blinking? cursor as a vertical line instead of 1
"let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"let &t_SR = "\<Esc>]50;CursorShape=2\x7"
"let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Keep buffers around?
set hidden

" Remove ~ Character indicating screen lines that are not in buffer (I like ~ as an indicator for this, though numbers also do it)
"set fillchars=eob:\ ,

""""""""""""""""""""""""""""""""""""""""""""""
" Core Vim Keybindings / Rebinds
""""""""""""""""""""""""""""""""""""""""""""""


" Leader Key !!! (local leader used for local file settings, i.e. a python specific mapping or something, not currently used)
let mapleader = ','
let maplocalleader = "\\"
" Set a second leader key?
"nmap ยง <leader>



" Quick Saving (note: all maps should be nore, this means noremap dd dd wont be recursive)
nnoremap <leader>w :w<cr>
inoremap <c-w> <esc>:w<cr>a
" Quick Quit
nnoremap <leader>q :q<cr>

" Quick Quit no save
nnoremap <leader>Q :q!<cr>

" Quick Save & Quit
nnoremap <leader>x :x<cr>
noremap <c-x> <esc>:x<cr>

" Open Vim terminal split
nnoremap <leader>t :term<cr>

" Undo and Redo
nnoremap <leader>u :redo<cr>

inoremap <C-y> <esc>:redo<cr>i
inoremap <C-z> <esc>ui

" Capatalise current word
inoremap <C-u> <esc>mmviwU`ma
noremap <C-u> mmviwU`m


inoremap <C-q> <esc>
"inoremap <esc> <esc>:echo "don't use escape"<cr>i

" Spelling
:set spell spelllang=en_gb
:nnoremap ? z=
:nnoremap < [s
:nnoremap > ]s

" Replace all occurances of current word
"nnoremap gw :%s/\<<c-r><c-w>\>//g<left><left>
"nnoremap ge "zye:%s/<C-R>z/
" Re-sourse vimrc file (reloads settings) Seems kinda broke though (no colours on status line)
nnoremap <leader>r :source ~/.vimrc<cr> 

" Clears search highlighting
nnoremap <CR> :noh<CR><CR>

" Spliting New Panes
" nnoremap <leader>v :vnew<CR> " Create a vertical Split
nnoremap <leader>- :new<CR> " Create a Hotizontal Split



" Wrap word in douple quotes (same functionality as tpope's surround yss"
"noremap <leader>" viw<esc>a"<esc>bi"<esc>lel


noremap <leader>j <C-w>j| "switching to below window 
noremap <leader>k <C-w>k| "switching to above window
noremap <leader>l <C-w>l| "switching to right window 
noremap <leader>h <C-w>h| "switching to left window


nnoremap <leader>sv :source $MYVIMRC<cr>

set splitright
set splitbelow
" noremap <silent> <C-h> <Plug>WinMoveLeft
" noremap <silent> <C-j> <Plug>WinMoveDown
" noremap <silent> <C-k> <Plug>WinMoveUp
" noremap <silent> <C-l> <Plug>WinMoveRight


" noremap <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
noremap <space> /
noremap <C-space> ?

" Useful noremappings for managing tabs
noremap <leader>tn :tabnew<cr>
noremap <leader>to :tabonly<cr>
noremap <leader>tc :tabclose<cr>
noremap <leader>tm :tabmove 
noremap <leader><Tab> :tabnext<cr>













" Move current line up or down





" Parenthesis and Brackets

"vnorenoremap $1 <esc>`>a)<esc>`<i(<esc>
"vnorenoremap $2 <esc>`>a]<esc>`<i[<esc>
"vnorenoremap $3 <esc>`>a}<esc>`<i{<esc>
"vnorenoremap $$ <esc>`>a"<esc>`<i"<esc>
"vnorenoremap $q <esc>`>a'<esc>`<i'<esc>
"vnorenoremap $e <esc>`>a"<esc>`<i"<esc>

" noremap auto complete of (, ", ', [
"inorenoremap $1 ()<esc>i
"inorenoremap $2 []<esc>i
"inorenoremap $3 {}<esc>i
"inorenoremap $4 {<esc>o}<esc>O
"inorenoremap $q ''<esc>i
"inorenoremap $e ""<esc>i




" Renoremap VIM 0 to first non-blank character (not literal start)
noremap 0 ^


"" Aliases
:command Vimrc :vs ~/.vimrc
:command Zshrc :vs ~/.zshrc
:command Zshfunctions :vs ~/.dotfiles/zsh/functions.zsh
:command Zshalias :vs ~/.dotfiles/zsh/alias.zsh
:command Zshdefinitions :vs ~/.dotfiles/zsh/definitions.zsh
:command Tmuxrc :vs ~/.tmux.conf
:command Dotfiles :vs ~/.dotfiles/
:command VimPlugins :vs ~/.dotfiles/vim/plugins.vim
:command TempVim :vs ~/.dotfiles/vim/temp.vim
:command PyBoiler :vs ~/.dotfiles/vim/boilerplate/python/riley_base.py
:command TexBoiler :vs ~/.dotfiles/vim/boilerplate/latex/riley_base.tex





""""""""""""""""""""""""""""""""""""""""""""""
" Useful
""""""""""""""""""""""""""""""""""""""""""""""

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

" Adds python boilerplate
autocmd BufNewFile *.py 0r /Users/riley/.dotfiles/vim/boilerplate/python/riley_base.py
autocmd BufNewFile *.tex 0r /Users/riley/.dotfiles/vim/boilerplate/latex/riley_base.tex

if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif

autocmd QuitPre *.tex {
    call CleanCurrentTex()
    }
"autocmd VimLeavePre *.tex {
    "call CleanCurrentTex()
    "}

autocmd VimEnter *.tex {
    echo "Hello"
    }

" Pressing ,ss will toggle and untoggle spell checking
noremap <leader>ss :setlocal spell!<cr>





" Turn persistent undo on 
" means that you can undo even when you close a buffer/VIM
try
    set undodir=~/.vim_runtime/temp_dirs/undodir
    set undofile
catch
endtry






""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Rules
""""""""""""""""""""""""""""""""""""""""""""""
"" Vimux

" Saves file Run script in tmux shell bellow (doesnt need executible if sh or py)
fun! RunCurrentScript()
    w
    call VimuxRunCommandInDir("run-script", 1)
endfun
fun! CleanCurrentTex()
    w
    call VimuxRunCommandInDir("cleantex", 1)
endfun
fun! OpenTexPdf()
    w
    call VimuxRunCommandInDir("opentexpdf", 1)
endfun
fun! OpenCurrentTexmaker()
    w
    call VimuxRunCommandInDir("opencurrenttexmaker", 1)
endfun
fun! RunCurrentScriptandOpenTexPdf()
    w
    call VimuxRunCommandInDir("run-script", 1)
    call VimuxRunCommandInDir("opentexpdf", 1)
endfun
fun! RunCurrentScriptandUpdatePreview()
    w
    call VimuxRunCommandInDir("run-script", 1)
    call VimuxRunCommandInDir("opentexpdf", 1)
    call VimuxRunCommandInDir("touchpreview", 1)
endfun
fun! CdToFileDirectory()
    w
    call VimuxRunCommandInDir("cdtofile", 1)
endfun

fun! TexOpenCitations()
    call VimuxRunCommandInDir("open Citations/*", 0)
endfun


nnoremap <leader>z :call RunCurrentScript()<cr>
nnoremap <leader>~ :call RunCurrentScriptandOpenTexPdf()<cr>
nnoremap <leader>` :call RunCurrentScriptandUpdatePreview()<cr>
nnoremap <leader>c :call CleanCurrentTex()<cr>
nnoremap <leader>o :call OpenTexPdf()<cr>
nnoremap <leader>m :call OpenCurrentTexmaker()<cr>
nnoremap <leader>tc :call TexOpenCitations()<cr>
"nnoremap <leader>d :call CdToFileDirectory()<cr>

"inoremap <C-`> <esc>:call RunCurrentScriptandOpenTexPdf()<cr>

let dir = expand('%:p:h')

nnoremap <leader>d :call VimuxRunCommand("cd '" . dir . "'")<cr>

nnoremap <leader><leader> :call VimuxPromptCommand()<cr>


" Runs but doesnt save
"nnoremap <leader>z :call VimuxRunCommandInDir("run-script", 1)<cr>
let g:VimuxOrientation = "v"
        





"" Vimtex
" Set tex type to latex
let g:tex_flavor = 'latex' "Never got working






"" NERDTree 
" Show hidden files in NERDTree
let g:NERDTreeShowHidden=0

"autocmd vimenter * NERDTree
"nmap <C-\> :NERDTreeToggle<CR>
"Closes vim if NERDTree is only window
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeWinPos = "left"


nmap <silent> <leader>y :NERDTreeFind<cr>
"nmap <leader>n :NERDTreeToggle<cr>
nmap <silent> <leader>\ :NERDTreeToggle<cr>







"" YouCompleteMe
" Closes YCM window i think???
let g:ycm_autoclose_preview_window_after_completion = 1

" Find out how to move this preview to the bottom
set completeopt-=preview



"" Vim-Tmux-Navigator
" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 1



"" vim-tmux-runner (Use VIMUX to doe this?)
" Helps make python work right
let g:VtrStripLeadingWhitespace = 0
let g:VtrClearEmptyLines = 0
let g:VtrAppendNewline = 1

"nmap <leader>ta :call VtrSendLinesToRunner()<cr>
let g:VtrUseVtrmaps = 1



colorscheme xcodedark


" Vimtex 
" info).
syntax enable

" Viewer options: One may configure the viewer either by specifying a built-in
" viewer method:
let g:vimtex_view_method = 'skim'
let g:vimtex_compiler_method = 'latexmk'
let maplocalleader = ","
let g:vimtex_indent_enabled = 0
" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"







nnoremap <leader>bb i\begin{align}<esc>o\end{align}<esc>O<tab><backspace>
nnoremap <leader>bl i\begin{itemize}<esc>o\end{itemize}<esc>O<tab><backspace><backspace>\item<space>
nnoremap <leader>be i\begin{enumerate}<esc>o\end{enumerate}<esc>O<backspace>\item<space>
nnoremap <leader>bi i\begin{figure}<esc>o\end{figure}<esc>O\centering<cr>\includegraphics{images/}<cr>\label{fig1}<esc>kA<esc>i

"inoremap <C-i> <cr><backspace>\item<space>
nnoremap <leader>// mm0eea[\checkmark]<esc>`m12l
nnoremap <leader>/\ mm0eea[\XSolidBrush]<esc>`m14l
nnoremap <leader>/. 0et]di]hxx 
nnoremap <leader>aa mmA\\<esc>0t=a&<esc>`ml
vnoremap <C-w> g<C-g>






""""""""""""""""""""""""""""""""""""""""""""""
" Private
""""""""""""""""""""""""""""""""""""""""""""""

if filereadable(expand("~/.dotfiles/vim/private.vim"))
    source ~/.dotfiles/vim/private.vim
endif






""""""""""""""""""""""""""""""""""""""""""""""
" Abreviations
""""""""""""""""""""""""""""""""""""""""""""""



source ~/.dotfiles/vim/abreviations.vim




""""""""""""""""""""""""""""""""""""""""""""""
" Visuals
""""""""""""""""""""""""""""""""""""""""""""""


source ~/.dotfiles/vim/visuals.vim



""""""""""""""""""""""""""""""""""""""""""""""
" Filetypes
""""""""""""""""""""""""""""""""""""""""""""""


source ~/.dotfiles/vim/filetypes.vim






""""""""""""""""""""""""""""""""""""""""""""""
" Unknown
""""""""""""""""""""""""""""""""""""""""""""""

" What does this do??? Without nore it broke things ...
":inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"



""""""""""""""""""""""""""""""""""""""""""""""
" Temp Vimrc File (used to quickly add a temp vimrc line)
""""""""""""""""""""""""""""""""""""""""""""""

source ~/.dotfiles/vim/temp.vim



""""""""""""""""""""""""""""""""""""""""""""""
" Dont Want?
""""""""""""""""""""""""""""""""""""""""""""""

" Clear highlighted search
"map <space> :set hlsearch! h1seach?<cr>

" markdown to html
"nmap <leader>md :%!markdown --html4tags <cr>





















