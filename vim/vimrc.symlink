""""""""""""""""""""""""""""""""""""""""""""""
" Add Plugins (seems important to put this hear)
""""""""""""""""""""""""""""""""""""""""""""""
source ~/.dotfiles/vim/plugins.vim





" VimVompletesMe
augroup VimCompletesMeTex
    autocmd!
    autocmd FileType tex
        \ let b:vcm_omni_pattern = g:vimtex#re#neocomplete
augroup END




inoremap <expr> <C-X><C-K> !empty(&dictionary) <bar><bar> &spell ? '<C-X><C-K>' : '<C-O>:call <SID>dictionary_complete_nospell()<CR><C-X><C-K>'

function! s:dictionary_complete_nospell() abort
  set spell
  augroup dictionary_complete_nospell
    autocmd!
    autocmd CompleteDone <buffer> ++once set nospell
  augroup END
endfunction
""""""""""""""""""""""""""""""""""""""""""""""
" Core Vim Setting
""""""""""""""""""""""""""""""""""""""""""""""

" When searching through a fie, do it recurisvly
set path+=**

" Add yank to normal clipboard
set clipboard=unnamed

" Allow mouse to jump cursor
set mouse=a
      
" Line number relative to current line
set number relativenumber

" seet paste toggle
"set pastetoggle=<leader>v
        
" Sets delay for <esc> ke
set timeoutlen=10 ttimeoutlen=0
        
" Sets how many lines of history VIM has to remember
set history=1000

" Tells vim to keep a backup file
set backup

" tell vim where to put its backup files
set backupdir=~/.dotfiles/vim/backup

" tell vim where to put swap files
set dir=~/.dotfiles/vim/swapfiles

" tell vim where to put undo files
set undodir=~/.vim/undodir
set undofile

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread
au FocusGained,BufEnter * checktime



" Underlines cursor line in insert mode (I don't love it)
"autocmd InsertEnter,InsertLeave * set cul!

" Disables the annoying shift-arrow key page jump behavior (now just moves
" like you shift wasn't pressed)
set keymodel=startsel



nnoremap <Up> gk
nnoremap <Down> gj
nnoremap <s-up> gk
nnoremap <s-down> gj




" Keep buffers around?
set hidden

" Save file when changing buffer
" set autowriteall

" Remove ~ Character indicating screen lines that are not in buffer (I like ~ as an indicator for this, though numbers also do it)
"set fillchars=eob:\ ,

" Makes i<esc> not move the cursor, while a<esc> shifts one right (Nice but weird)
"inoremap <Esc> <Esc>`^



" Reduce Message Size
set shortmess=at




""""""""""""""""""""""""""""""""""""""""""""""
" Buffer Variables
""""""""""""""""""""""""""""""""""""""""""""""
"" doesn't really work with multiple files in the buffer.
let w:filenamedotextension=expand("%")
let w:filename=expand("%:r")

fun! LocalFilename()
    let l:filename=expand("%:r")
    let l:filenamedotextension=expand("%")
    return l:filename
endfun



""""""""""""""""""""""""""""""""""""""""""""""
" Core Vim Keybindings / Rebinds
""""""""""""""""""""""""""""""""""""""""""""""


" Leader Key !!! (local leader used for local file settings, i.e. a python specific mapping or something, not currently used)
let mapleader=','
let maplocalleader = "\\"
" Set a second leader key?
"nmap § <leader>



" Quick Saving (note: all maps should be nore, this means noremap dd dd wont be recursive)
nnoremap <leader>w :w<cr>
nnoremap <esc> :w<cr>
command W w
inoremap <c-w> <esc>:w<cr>a
" Quick Quit
nnoremap <leader>q :q<cr>
command Q q!

" Quick Quit no save
nnoremap <leader>Q :q!<cr>

" Quick Save & Quit
" command X x<cr>
nnoremap <leader>x :x<cr>
noremap <c-x> <esc>:x<cr>

" Open Vim terminal split
nnoremap <leader>t :term<cr>
" unmap :X
" Undo and Redo
" nnoremap <leader>u :redo<cr>
nnoremap U :redo<cr>

inoremap <C-y> <esc>:redo<cr>i
inoremap <C-z> <esc>ui

" Capatalise current word
inoremap <C-u> <esc>mmviwU`ma
noremap <C-u> mmviwU`m

" Goes to the end of the last word
nnoremap E wbbe
command B b#

"" https://stackoverflow.com/questions/78349073/vim-unmap-predefined-command-specifically-x/78349258#78349258
cnoremap <expr> X getcmdpos() == 1 ? 'x' : 'X'

" command Enc[rypt] echo 'test'


" inoremap <C-q> <esc>
"inoremap <esc> <esc>:echo "don't use escape"<cr>i

" Spelling
:set spell spelllang=en_gb
:nnoremap ? z=
:nnoremap < [s
:nnoremap > ]s

" Replace all occurances of current word
"nnoremap gw :%s/\<<c-r><c-w>\>//g<left><left>
"nnoremap ge "zye:%s/<C-R>z/
" Re-source vimrc file 
nnoremap <leader>r :source ~/.vimrc<cr> 

" Clears search highlighting
nnoremap <CR> :noh<CR><CR>

" In iTerm, you need to fix how how <s-cr> is interpreted, vim expects <esc>+[13;2u for some reason.
" https://stackoverflow.com/questions/16359878/how-to-map-shift-enter
" I managed to correct my terminal key-code for Shift+Enter by sending the key-code Vim apparently expects. Depending on your terminal, (Adding Ctrl+Enter as a bonus!)

" iTerm2
" 
" For a single Profile open Preferences → Profiles → Keys → [+] (Add)
" For all profiles open Preferences → Keys → [+] (Add)
" 
" Keyboard shortcut: (Hit Shift+Enter)
" Action: Send Escape Sequence
" Esc+ [13;2u
" 
" Repeat for Ctrl+Enter, with sequence: [13;5u
"
function RedrawCR()
    redraw!
    echo ":redraw!"
endfun
nnoremap <S-CR> :call RedrawCR()<cr><cr>
" nnoremap <S-CR> :redraw!<CR><CR>

" Spliting New Panes
" nnoremap <leader>v :vnew<CR> " Create a vertical Split
nnoremap <leader>- :new<CR> " Create a Hotizontal Split



" Wrap word in douple quotes (same functionality as tpope's surround yss"
"noremap <leader>" viw<esc>a"<esc>bi"<esc>lel


noremap <leader>j <C-w>j| "switching to below window 
noremap <leader>k <C-w>k| "switching to above window
noremap <leader>l <C-w>l| "switching to right window 
noremap <leader>h <C-w>h| "switching to left window

" Resizing Panes
noremap <leader>J <C-w>10- 
noremap <leader>K <C-w>10+ 
noremap <leader>L <C-w>10> 
noremap <leader>H <C-w>10< 

nnoremap <leader>sv :source $MYVIMRC<cr>

set splitright
set splitbelow
" noremap <silent> <C-h> <Plug>WinMoveLeft
" noremap <silent> <C-j> <Plug>WinMoveDown
" noremap <silent> <C-k> <Plug>WinMoveUp
" noremap <silent> <C-l> <Plug>WinMoveRight


" noremap <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
" In vim to get a hex code for a certain combination do (for <C-u> here):
"  <C-v><C-u><C-c>ga
" You need to do this for <S-space> command to work and map iterms mapping in profile to the hex key
noremap <space> /


" Wildcard opening new files in buffers, tabs, splits
noremap <c-e> :edit *
noremap <c-t> :tabnew *
noremap <c-f> :vs *
noremap <c-v> :88vs *
noremap <c-s> :split *
nnoremap <leader>v :vertical resize 88<cr>
nnoremap <leader>§v :vertical resize 26<cr>

noremap <c-b> <c-v>
noremap <c-space> ?
noremap <leader>] gt
noremap <leader>[ gT

" Useful noremappings for managing tabs
noremap <leader>tn :tabnew<cr>
noremap <leader>to :tabonly<cr>
noremap <leader>tc :tabclose<cr>
noremap <leader>tm :tabmove 
noremap <leader><Tab> :tabnext<cr>






augroup Example
    autocmd!
    autocmd TextYankPost * if v:event.operator ==# 'y' | echo "Yanked Text" | endif
augroup END




" Tab in or out visually selected lines
xnoremap > >gv
xnoremap < <gv
xnoremap <Tab> >gv
xnoremap <S-Tab> <gv
nnoremap <Tab> V>
nnoremap <S-Tab> V<

" Select all line but not the newline
nnoremap <leader>Y mm^v$hy`m
nnoremap <leader>D mm^v$hd`m
inoremap <C-v> <esc>pa
" inoremap <leader>w <esc>:w<cr>
" inoremap <leader>x <esc>:x<cr>
" inoremap :w <esc>:w
" inoremap :W <esc>:w

" Delete only after paste, works only for full line
" nnoremap <leader>m yymd
" nnoremap <leader>p p`ddd


" Move current line up or down
nnoremap ; :m +1<cr>
nnoremap ' :m -2<cr>
nnoremap <leader>k :m -2<cr>
nnoremap <leader>k :m -2<cr>




" Parenthesis and Brackets

"vnorenoremap $1 <esc>`>a)<esc>`<i(<esc>
"vnorenoremap $2 <esc>`>a]<esc>`<i[<esc>
"vnorenoremap $3 <esc>`>a}<esc>`<i{<esc>
"vnorenoremap $$ <esc>`>a"<esc>`<i"<esc>
"vnorenoremap $q <esc>`>a'<esc>`<i'<esc>
"vnorenoremap $e <esc>`>a"<esc>`<i"<esc>

" noremap auto complete of (, ", ', [
"inorenoremap $1 ()<esc>i
"inorenoremap $2 []<esc>i
"inorenoremap $3 {}<esc>i
"inorenoremap $4 {<esc>o}<esc>O
"inorenoremap $q ''<esc>i
"inorenoremap $e ""<esc>i




" Renoremap VIM 0 to first non-blank character (not literal start)
noremap 0 ^


"" Aliases
if has("win32")
    " Windows Options
    :command Vimrc :vs ~/_vimrc
else
    if has("unix")
        if has("macunix")
            "Mac options here
            :command Vimrc :vs ~/.vimrc
        endif
    endif
endif
source ~/.dotfiles/vim/abreviations.vim
:command VimAbreviations :vs ~/.dotfiles/vim/abreviations.vim
:command VimPlugins :vs ~/.dotfiles/vim/plugins.vim
:command VimFiletypes :vs ~/.dotfiles/vim/filetypes.vim
:command VimSpellDict :vs ~/.dotfiles/vim/bundle/Vundle.vim/spell/en.utf-8.add
:command Zshrc :vs ~/.zshrc
:command Zshfunctions :vs ~/.dotfiles/zsh/functions.zsh
:command Zshalias :vs ~/.dotfiles/zsh/alias.zsh
:command Zshdefinitions :vs ~/.dotfiles/zsh/definitions.zsh
:command Tmuxrc :vs ~/.tmux.conf
:command Dotfiles :vs ~/.dotfiles/
:command TempVim :vs ~/.dotfiles/vim/temp.vim
:command PyBoiler :vs ~/.dotfiles/vim/boilerplate/python/riley_base.py
" :command OctaveBoiler :vs ~/.dotfiles/vim/boilerplate/octave/riley_base.m
:command TexBoiler :vs ~/.dotfiles/vim/boilerplate/latex/riley_base.tex
:command Todo :vs ~/todo.md


function! EditAndRebuildSpellfile()
  if &spellfile == ''
    echo "No spellfile set. Please set it with :set spellfile=~/.vim/spell/en.utf-8.add"
    return
  endif

  " Open the spellfile in a new tab
  execute 'tabedit ' . expand(&spellfile)

  " Define an autocmd that triggers when this buffer is written or closed
  augroup SpellfileRebuild
    autocmd!
    autocmd BufWritePost,BufUnload <buffer> call s:RebuildSpellfile()
  augroup END
endfunction

function! s:RebuildSpellfile()
  " Rebuild the .spl file after editing
  execute 'mkspell! ' . expand(&spellfile)
  echo "Spellfile rebuilt."
  " Remove the autocmd group to avoid duplicate triggers
  augroup SpellfileRebuild
    autocmd!
  augroup END
endfunction

command! EditSpellfile call EditAndRebuildSpellfile()




""""""""""""""""""""""""""""""""""""""""""""""
" Folding
""""""""""""""""""""""""""""""""""""""""""""""
au FileType cpp set foldmethod=syntax 
au FileType cpp set foldnestmax=10
au FileType cpp set nofoldenable
au FileType cpp set foldlevel=2






""""""""""""""""""""""""""""""""""""""""""""""
" Useful
""""""""""""""""""""""""""""""""""""""""""""""

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun






"--------------- latex syntax  ---------------"
" hi clear texStyleBold
hi clear texStyleItal
hi texStyleItal cterm=bold
hi clear mdStyleItal
hi mdStyleItal cterm=bold



if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif



" Pressing ,ss will toggle and untoggle spell checking
noremap <leader>ss :setlocal spell!<cr>





" Turn persistent undo on 
" means that you can undo even when you close a buffer/VIM
try
    set undodir=~/.vim_runtime/temp_dirs/undodir
    set undofile
catch
endtry






""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""
"" gx-extended: stsewd/gx-extended
" Due to the default gx command being overridden by 'preservim/vim-markdown', we
" need to redefine the keybind here.


nnoremap gl :call gxext#normal()<cr>



set dictionary+=/usr/share/dict/words
set complete+=k
set completeopt=menu,menuone,preview


set pumheight=10
inoremap <C-d> <C-X><C-K>

au FileType markdown set tags+=/Users/riley/.dotfiles/vim/dictionary.tags

" Trigger popup automatically after a short delay
let g:ycm_auto_trigger = 1

" Number of characters typed before popup appears
let g:ycm_min_num_of_chars_for_completion = 1

" Delay before the popup shows (ms)
let g:ycm_completion_delay = 200

let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
" let g:ycm_filetype_whitelist = {
"   \ 'tex': 1,
"   \ }
" let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/simple_ycm_extra_conf.py'
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_server_python_interpreter = '/Users/riley/.pyenv/versions/3.13.1/bin/python'
" set completeopt=menu
set completeopt=menu,menuone,noselect


let g:ycm_auto_trigger = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1
autocmd FileType python let g:ycm_collect_identifiers_from_comments_and_strings = 0
autocmd FileType python let g:ycm_seed_identifiers_with_syntax = 0
autocmd FileType python let g:ycm_min_num_of_chars_for_completion = 99
autocmd FileType tex let g:ycm_min_num_of_chars_for_completion = 2
" make YCM compatible with UltiSnips (using <Ctrl-N>, <Ctrl-P>)
" let g:ycm_key_list_select_completion=[]
" let g:ycm_key_list_previous_completion=[]

" commands mappings
" nnoremap <F1> :pclose<CR>:silent YcmCompleter GetDoc<CR>
" nnoremap <S-F1> :pclose<CR>
" nnoremap <C-F1> :YcmCompleter GetType<CR>
" nnoremap <F9> :YcmCompleter GoTo<CR>
" nnoremap <S-F9> :YcmCompleter GoToReferences<CR>
" nnoremap <F10> :YcmCompleter FixIt<CR>

" let g:ycm_use_clangd = 1
let g:ycm_use_clangd = 0
let g:ycm_language_server = [
  \ {
  \   'name': 'pylsp',
  \   'filetypes': ['python'],
  \   'cmdline': ['pylsp']
  \ }
\ ]
if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
endif
au VimEnter * let g:ycm_semantic_triggers.tex=g:vimtex#re#youcompleteme
" let g:ycm_semantic_triggers =  {
"   \   'python': [ 're!\w{2}' ],
"   \   'tex': ['re!\w{3}'],           
"   \ }
let g:ycm_python_interpreter_path = ''
let g:ycm_python_sys_path = []
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
let g:ycm_global_ycm_extra_conf = '~/.dotfiles/vim/ycm_global_extra_cong.py'

"" NERDTree 
" Show hidden files in NERDTree
let g:NERDTreeShowHidden=0

"autocmd vimenter * NERDTree
"nmap <C-\> :NERDTreeToggle<CR>
"Closes vim if NERDTree is only window
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeWinPos = "left"


nmap <silent> <leader>y :NERDTreeFind<cr>
"nmap <leader>n :NERDTreeToggle<cr>
nmap <silent> <leader>\ :NERDTreeToggle<cr>



let g:ycm_enable_diagnostics_ui = 0
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 0

" Keep your syntax colors, just show signs/underlines
" highlight YcmErrorLine      gui=underline cterm=underline guibg=NONE ctermbg=NONE
" highlight YcmWarningLine    gui=underline cterm=underline guibg=NONE ctermbg=NONE
" highlight YcmErrorSection   gui=underline cterm=underline guibg=NONE ctermbg=NONE
" highlight YcmWarningSection gui=underline cterm=underline guibg=NONE ctermbg=NONE
" highlight YcmErrorLine guibg=#3f0000
" Signs in the gutter (still visible)
highlight YcmErrorSign      guifg=Red ctermfg=Red
" highlight YcmWarningSign    guifg=Blue ctermfg=BLUE
highlight YcmErrorSign guifg=#0000FF ctermfg=Blue
highlight YcmWarningSign guifg=#0000FF ctermfg=Blue



"" YouCompleteMe
" Closes YCM window i think???
let g:ycm_autoclose_preview_window_after_completion = 1


" Use homebrew's clangd
let g:ycm_clangd_binary_path = trim(system('brew --prefix llvm')).'/bin/clangd'


" Find out how to move this preview to the bottom
set completeopt-=preview






"" Commentary


:command VimVisuals :vs ~/.dotfiles/vim/visuals.vim


""""""""""""""""""""""""""""""""""""""""""""""
" Private
""""""""""""""""""""""""""""""""""""""""""""""

if filereadable(expand("~/.dotfiles/vim/private.vim"))
    source ~/.dotfiles/vim/private.vim
endif



""""""""""""""""""""""""""""""""""""""""""""""
" Abreviations
""""""""""""""""""""""""""""""""""""""""""""""



source ~/.dotfiles/vim/abreviations.vim




""""""""""""""""""""""""""""""""""""""""""""""
" Visuals
""""""""""""""""""""""""""""""""""""""""""""""


source ~/.dotfiles/vim/visuals.vim





""""""""""""""""""""""""""""""""""""""""""""""
" Filetypes
""""""""""""""""""""""""""""""""""""""""""""""

source ~/.dotfiles/vim/filetypes.vim





""""""""""""""""""""""""""""""""""""""""""""""
" Unknown
""""""""""""""""""""""""""""""""""""""""""""""

" What does this do??? Without nore it broke things ...
":inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"



""""""""""""""""""""""""""""""""""""""""""""""
" Temp Vimrc File (used to quickly add a temp vimrc line)
""""""""""""""""""""""""""""""""""""""""""""""

source ~/.dotfiles/vim/temp.vim



""""""""""""""""""""""""""""""""""""""""""""""
" Dont Want?
""""""""""""""""""""""""""""""""""""""""""""""

" Clear highlighted search
"map <space> :set hlsearch! h1seach?<cr>

" markdown to html
"nmap <leader>md :%!markdown --html4tags <cr>










set iskeyword+=: "Enables fig:<autocompletion> with <C-n> 
" set iskeyword+=} " word boundary




" Word Count


" new in vim 7.4.1042
let g:word_count=wordcount().words
function WordCount()
    if has_key(wordcount(),'visual_words')
        let g:word_count=wordcount().visual_words."/".wordcount().words " count selected words
    else
        let g:word_count=wordcount().cursor_words."/".wordcount().words " or shows words 'so far'
    endif
    return g:word_count
endfunction


nnoremap <leader>W :echo WordCount()<cr>

function! LineWordCount()
    return len(split(getline('.')))
endfunction

command LineWordCount echo LineWordCount()
" nnoremap <leader>L :echo LineWordCount()<cr>


xnoremap <silent> <leader>L g<c-g>



function! EpubClean()
    if search("p><p","cwn")>0
        %s/p><p/p>\r<p/g
    endif
endfunction

let g:colorcolumnbool=0
function! EightyLineToggle()
    if g:colorcolumnbool==0
        set colorcolumn=80
        let g:colorcolumnbool=1
    else
        set colorcolumn=200
        let g:colorcolumnbool=0
    endif
endfunction

function! EightyLineFlash()
    call EightyLineToggle()
    redraw
    sleep 350m
    call EightyLineToggle()
endfunction


command EightyLineToggle call EightyLineToggle()
command EightyLineFlash call EightyLineFlash()
nnoremap <leader>ft :call EightyLineToggle()<cr>
nnoremap <leader>ff :call EightyLineFlash()<cr>
" Stop the 'n files to edit' error, doesn't work...
" if argc() > 1
"  silent blast " load last buffer
"  silent bfirst " switch back to the first
" endif

set shortmess=at








function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

nnoremap <leader>? :call SynStack()<cr>

if has("win32")
    " Windows Options
    source ~/.dotfiles/vim/windows.vim
else
    if has("unix")
        if has("macunix")
            "Mac options here
            source ~/.dotfiles/vim/mac.vim
            "--------------- Snippets ---------------"
            let g:UltiSnipsExpandTrigger = '§'
            let g:UltiSnipsJumpForwardTrigger = '§'
            let g:UltiSnipsJumpBackwardTrigger = '<s-§>'
            let g:UltiSnipsSnippetDirectories=["/users/riley/.dotfiles/vim/snippets"] " Cannot use $HOME here?
            "" Vim-Tmux-Navigator
            " Write all buffers before navigating from Vim to tmux pane
            let g:tmux_navigator_save_on_switch = 1

        endif
    endif
endif


set nospell
autocmd BufRead,BufNewFile *tex set spell
autocmd BufRead,BufNewFile *md set spell
autocmd BufRead,BufNewFile *txt set spell
set spellfile=~/.dotfiles/vim/spell/test.utf-8.add











"--------------- latex syntax  ---------------"
" hi clear texStyleBold
hi clear texStyleItal
hi texStyleItal cterm=bold
hi clear mdStyleItal
hi mdStyleItal cterm=bold
hi clear mdStyleBold
hi mdStyleBold cterm=bold
hi SpellBad cterm=underline

" set iskeyword+={ " word boundary
" set iskeyword+=} " word boundary



" source ~/.dotfiles/vim/basic.vim
" finish


" highlight YcmErrorSign   guifg=#800080 ctermfg=Magenta
highlight YcmErrorSign   guifg=#FF0000 ctermfg=Red
highlight YcmWarningSign guifg=#808080 ctermfg=Grey
